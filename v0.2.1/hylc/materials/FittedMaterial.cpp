#include "FittedMaterial.hpp"

using namespace hylc;
using namespace hylc::mathematica;

#include <iostream>
FittedMaterial::FittedMaterial(int type) {

  ek_min = {0.6, -0.5, 0.6, -50, -50, -50};
  ek_max = {1.5, 0.5, 1.5, 50, 50, 50};

  std::cout << "Loading Material " << type << "\n";
  switch (type) {
  default:
  case 0: // knit: slipstitchhoney
    density = 4.8530851068e-01;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499895929000000e+01;
    ekscale[4] = 2.830914444500000e+01;
    ekscale[5] = 4.499890999000000e+01;
    C0 = 4.718551958516539e-04;
    C01 = 1.021869010671862e-03;
    C02 = 1.192210183138594e-02;
    C03 = 3.640235525652275e-03;
    C04 = -2.181955872425724e-03;
    C11 = -5.501177462207649e-04;
    C12 = 3.929860445758271e-03;
    C13 = 9.605151021474313e-05;
    C14 = 9.348031942415463e-05;
    C21 = 1.405538408381210e-04;
    C22 = 4.869755126891468e-03;
    C23 = 4.069401405970608e-03;
    C24 = 1.562120632587678e-03;
    C31 = 1.281750255813433e-03;
    C32 = 5.976378067988489e-03;
    C33 = 1.013184542968030e-03;
    C34 = -4.628764072495189e-04;
    C41 = 3.404982842158995e-04;
    C42 = 1.749156879606522e-03;
    C43 = 2.459041972736625e-04;
    C44 = 9.439346992520677e-04;
    C51 = 2.365357351660408e-04;
    C52 = 1.404282615367256e-03;
    C53 = 4.736725618850221e-04;
    C54 = 3.783154759499993e-04;
    C0111 = -3.891901642030480e-04;
    C0112 = -8.666743163347497e-04;
    C0121 = 2.882192486423884e-04;
    C0113 = -2.325383153443422e-04;
    C0122 = 4.255852347602786e-04;
    C0131 = -2.094251760604327e-04;
    C0211 = 2.773461523715269e-03;
    C0212 = 2.969415472096996e-03;
    C0221 = 1.106008426354729e-02;
    C0213 = 5.563094135068408e-04;
    C0222 = 7.353556401912869e-03;
    C0231 = -3.039158368234878e-03;
    C0311 = 6.160825387440619e-03;
    C0312 = 1.631534502495171e-03;
    C0321 = 3.842512463832297e-03;
    C0313 = -2.191235101541562e-03;
    C0322 = -3.913413050216186e-03;
    C0331 = -2.738710620435184e-03;
    C0411 = -2.405493251351037e-03;
    C0412 = -5.075758795533869e-03;
    C0421 = 1.326693948086140e-04;
    C0413 = -1.078522312616665e-04;
    C0422 = -1.104866253091320e-03;
    C0431 = 7.982659146933070e-04;
    C0511 = 7.427910756445644e-05;
    C0512 = 3.384762267234393e-04;
    C0521 = -8.416246860944136e-04;
    C0513 = -9.528909622874801e-05;
    C0522 = 7.228850671939378e-04;
    C0531 = 5.454608421817282e-04;
    C2311 = 5.025590058599899e-04;
    C2312 = 1.267618852141296e-03;
    C2321 = 1.547828589571340e-03;
    C2313 = -8.594683064797540e-04;
    C2322 = 1.200604777255690e-03;
    C2331 = 4.996319231658187e-04;
    C2411 = 2.828244194246521e-05;
    C2412 = -1.253748484233669e-03;
    C2421 = -8.465258051943176e-04;
    C2413 = 6.875417112647519e-04;
    C2422 = -2.203947275257861e-03;
    C2431 = 4.024768381773539e-04;
    C2511 = -1.177290138512853e-03;
    C2512 = -1.319714646845781e-03;
    C2521 = 1.478599034646930e-03;
    C2513 = -5.427870262526849e-04;
    C2522 = 1.620189845478275e-03;
    C2531 = -1.318764979232923e-03;
    C3411 = 8.181813433505009e-04;
    C3412 = -5.498767449332686e-05;
    C3421 = -3.871161864055644e-04;
    C3413 = 1.842598537048326e-04;
    C3422 = -7.291610057731129e-04;
    C3431 = 5.031266811812540e-04;
    C3511 = -6.235124052075159e-05;
    C3512 = 7.463287288720689e-04;
    C3521 = 1.697739586783257e-03;
    C3513 = 5.516360003180168e-04;
    C3522 = 4.609052884157664e-03;
    C3531 = 1.688303754205380e-03;
    break;
  case 1: // knit: slipstitchrib
    density = 1.3852413106e+00;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499767134000000e+01;
    ekscale[4] = 2.691437711500000e+01;
    ekscale[5] = 4.499779783000000e+01;
    C0 = 1.054263501499052e+00;
    C01 = -1.643486653790452e-02;
    C02 = 2.065990601358705e-01;
    C03 = 4.409167906442002e-03;
    C04 = -3.705387617107397e-02;
    C11 = -7.212373678183748e-02;
    C12 = 1.528507507927347e-01;
    C13 = -2.493979991091431e-02;
    C14 = 1.606282335342883e-03;
    C21 = -4.687986829838825e-02;
    C22 = 3.515427954766976e-01;
    C23 = -1.169869346042549e-01;
    C24 = 1.008079480166624e-02;
    C31 = 9.751193123676101e-02;
    C32 = 5.987424331118356e-02;
    C33 = 8.248140050058056e-03;
    C34 = 2.991391068228848e-03;
    C41 = 3.182452198304746e-02;
    C42 = 7.144681358945972e-02;
    C43 = -8.605662110366868e-03;
    C44 = 8.502634455180030e-02;
    C51 = 6.527506692502591e-02;
    C52 = 9.941263496982031e-02;
    C53 = -2.198571882073260e-02;
    C54 = 4.541217184989560e-03;
    C0111 = -6.628424638945743e-02;
    C0112 = -7.858359510592705e-02;
    C0121 = 2.786486385074624e-02;
    C0113 = 1.655788633491900e-02;
    C0122 = -8.036569413919144e-03;
    C0131 = -2.379256186700408e-02;
    C0211 = 1.561301496487792e-01;
    C0212 = 4.450752212636308e-03;
    C0221 = 6.574175891294869e-02;
    C0213 = -5.036349210323486e-03;
    C0222 = -4.918221673911618e-02;
    C0231 = -6.818248536952026e-02;
    C0311 = -1.348491362879594e-01;
    C0312 = -4.376212706128048e-02;
    C0321 = 6.285858353296851e-02;
    C0313 = -8.377680109384012e-03;
    C0322 = 4.780700058305829e-03;
    C0331 = -7.441319691672640e-03;
    C0411 = 4.112692719336730e-02;
    C0412 = -1.565604484713203e-01;
    C0421 = 2.605777059312564e-02;
    C0413 = -9.942458282491184e-03;
    C0422 = -2.120129014384063e-02;
    C0431 = -2.404934942543891e-02;
    C0511 = -5.426372122557042e-02;
    C0512 = -1.761801819484335e-02;
    C0521 = 2.077817820426327e-02;
    C0513 = 1.087394491335041e-02;
    C0522 = 2.963728090408353e-03;
    C0531 = 6.833794226813732e-04;
    C2311 = -1.945122324487720e-02;
    C2312 = -3.318470035532912e-03;
    C2321 = 4.697840981447721e-02;
    C2313 = -4.687502304867140e-03;
    C2322 = -5.153689444675863e-03;
    C2331 = -3.157127997285510e-02;
    C2411 = -9.350679928668412e-04;
    C2412 = -2.660602250074339e-01;
    C2421 = 1.281598866025125e-02;
    C2413 = 5.104473338811468e-03;
    C2422 = 5.820926564722646e-02;
    C2431 = -1.712815878637003e-02;
    C2511 = -1.109181759684527e-02;
    C2512 = -8.953356746587114e-02;
    C2521 = -1.046443183774677e-02;
    C2513 = 2.462401431708253e-02;
    C2522 = 3.260917181982144e-02;
    C2531 = 2.520873094327755e-02;
    C3411 = -6.742727255662164e-04;
    C3412 = 5.546098668103415e-02;
    C3421 = 1.025068516481355e-02;
    C3413 = 1.454950512712015e-03;
    C3422 = -3.611904482105619e-03;
    C3431 = 9.033662876106121e-03;
    C3511 = -2.297634235554923e-02;
    C3512 = 2.565380349910345e-02;
    C3521 = -1.023161297057252e-01;
    C3513 = -9.499091629349465e-02;
    C3522 = 5.316768150539140e-01;
    C3531 = -3.676612335112971e-02;
    break;
  case 2: // woven: basket2_2
    density = 7.3281131170e-02;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 5.999603178000000e+02;
    ekscale[4] = 2.756886673000000e+02;
    ekscale[5] = 5.999609855000000e+02;
    C0 = 6.136959211472631e-02;
    C01 = 9.772565564108804e-04;
    C02 = 7.587445277273594e-02;
    C03 = -5.922856928447810e-04;
    C04 = -1.139613287020674e-02;
    C11 = -2.656021673212524e-04;
    C12 = 1.290125111010594e-02;
    C13 = 5.970433292159094e-06;
    C14 = 2.633995881432875e-03;
    C21 = -5.891973087733153e-03;
    C22 = 7.391681120935974e-02;
    C23 = 3.385469886268185e-03;
    C24 = -1.323518441821058e-02;
    C31 = -4.306120219805982e-04;
    C32 = 1.118066700931150e-02;
    C33 = 2.701886467075081e-04;
    C34 = 2.075231103919380e-03;
    C41 = -4.512376282744367e-05;
    C42 = -9.039408875314854e-03;
    C43 = -2.741788767522702e-05;
    C44 = 5.195135683330288e-03;
    C51 = 1.243497003364143e-04;
    C52 = 1.101553449924861e-02;
    C53 = -9.528691258083933e-05;
    C54 = 1.794913889322296e-03;
    C0111 = 1.502078720802803e-04;
    C0112 = -1.554268020809303e-02;
    C0121 = -5.778035061280652e-04;
    C0113 = -4.893869443797544e-05;
    C0122 = 7.949891333384600e-03;
    C0131 = 4.108265022846758e-04;
    C0211 = 5.429090369225512e-03;
    C0212 = -1.631895400645289e-02;
    C0221 = -1.556662304083416e-02;
    C0213 = 9.883557514526253e-03;
    C0222 = 6.770421362344640e-03;
    C0231 = 9.382448221084062e-03;
    C0311 = -1.373967163346879e-03;
    C0312 = -1.224787962472369e-02;
    C0321 = 8.439432910071874e-03;
    C0313 = -1.251211387048241e-03;
    C0322 = 2.859579804573267e-03;
    C0331 = -6.796050160215907e-03;
    C0411 = -3.019370260145414e-04;
    C0412 = -1.660697819092017e-02;
    C0421 = 4.996459419893028e-04;
    C0413 = 8.663886785614270e-05;
    C0422 = -4.106665293819085e-03;
    C0431 = -1.919026022837766e-04;
    C0511 = -2.292070191674317e-05;
    C0512 = -9.987443336825273e-03;
    C0521 = -2.625135147993046e-04;
    C0513 = 3.427769971072714e-05;
    C0522 = 1.182584191692849e-02;
    C0531 = 2.278584759182704e-04;
    C2311 = 2.030635084556369e-04;
    C2312 = -1.034897743482782e-02;
    C2321 = 5.782916839935484e-04;
    C2313 = -1.608337534371439e-04;
    C2322 = 1.161252177593013e-02;
    C2331 = -5.924174961916591e-04;
    C2411 = 3.446570421544148e-04;
    C2412 = -1.770873666922038e-02;
    C2421 = -1.133026242361172e-04;
    C2413 = -1.423283839097377e-04;
    C2422 = -3.815189419687455e-03;
    C2431 = -1.215236963364148e-04;
    C2511 = 1.104526928463252e-03;
    C2512 = -7.390581636054529e-03;
    C2521 = -3.375425450762292e-03;
    C2513 = 1.151592957269036e-04;
    C2522 = -1.854858534590815e-03;
    C2531 = 2.384569590847989e-03;
    C3411 = -1.250741370935213e-04;
    C3412 = 1.901640809517287e-04;
    C3421 = 2.690050171275099e-04;
    C3413 = 1.645865230338659e-04;
    C3422 = 2.748298273466060e-03;
    C3431 = -5.734357275042974e-05;
    C3511 = 4.878755560239309e-03;
    C3512 = 9.740750387766640e-04;
    C3521 = -1.066572470265899e-03;
    C3513 = -2.459163311749889e-02;
    C3522 = 2.388901341163707e-01;
    C3531 = -2.812445003777088e-02;
    break;
  case 3: // woven: twill2_1
    density = 7.2490697884e-02;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499903360000000e+02;
    ekscale[4] = 2.395935517000000e+02;
    ekscale[5] = 4.499903967000000e+02;
    C0 = 1.184289278645800e-01;
    C01 = -1.294075018552924e-03;
    C02 = 8.938751474758191e-02;
    C03 = -4.013132741337273e-02;
    C04 = 1.347943051834955e-02;
    C11 = 2.185656662130380e-02;
    C12 = 2.244160721364973e-02;
    C13 = 2.576338356146874e-03;
    C14 = 2.012990871687447e-03;
    C21 = -3.637179648935582e-03;
    C22 = 8.923748355803193e-02;
    C23 = -3.888575202063752e-02;
    C24 = 1.201580945516589e-02;
    C31 = -8.249584819765374e-03;
    C32 = 6.313572075688911e-03;
    C33 = 4.400713515760835e-05;
    C34 = 7.058714053740652e-04;
    C41 = -1.624764010006863e-04;
    C42 = -2.730534852742290e-03;
    C43 = -2.975312946149973e-04;
    C44 = 2.309282097017429e-03;
    C51 = 7.555275102194766e-03;
    C52 = 6.465105922760114e-03;
    C53 = 1.052914025462130e-04;
    C54 = 6.536406418436623e-04;
    C0111 = -2.254874219224598e-02;
    C0112 = -2.310121775295810e-02;
    C0121 = 8.607548404323226e-03;
    C0113 = -5.768223261023183e-04;
    C0122 = 1.024824029973316e-02;
    C0131 = 5.563516327910206e-05;
    C0211 = 3.142690314876349e-03;
    C0212 = -4.096491913054942e-03;
    C0221 = -6.204673362879250e-03;
    C0213 = 1.075620536018410e-03;
    C0222 = 2.832837636355542e-03;
    C0231 = 2.683418972962802e-03;
    C0311 = -6.679629172760059e-03;
    C0312 = -1.168503417758775e-02;
    C0321 = -4.805535519913080e-05;
    C0313 = -3.628075459832539e-04;
    C0322 = 8.802958970813016e-03;
    C0331 = 1.429804196835897e-03;
    C0411 = 3.284998857285002e-03;
    C0412 = -2.307617623537304e-02;
    C0421 = 9.031886924799729e-03;
    C0413 = -3.350731505615294e-04;
    C0422 = 1.146959562262590e-02;
    C0431 = -7.211963974210297e-03;
    C0511 = -4.350064714511139e-04;
    C0512 = -1.059136659450452e-03;
    C0521 = 1.536962362801442e-03;
    C0513 = -3.086386799568480e-06;
    C0522 = 3.882446378988071e-04;
    C0531 = -7.359405958152678e-04;
    C2311 = 7.567681456719473e-04;
    C2312 = -1.167977982525345e-03;
    C2321 = -1.753536149961190e-03;
    C2313 = -9.730340540275789e-05;
    C2322 = 4.115617432953657e-04;
    C2331 = 8.095140554433467e-04;
    C2411 = -1.105087373517883e-03;
    C2412 = -2.423697642136310e-02;
    C2421 = -1.009431967437101e-02;
    C2413 = 4.772927847114199e-04;
    C2422 = 1.214821835907113e-02;
    C2431 = 6.934257191553978e-03;
    C2511 = 6.148958934171084e-03;
    C2512 = -1.192800223608082e-02;
    C2521 = 8.746296903741769e-04;
    C2513 = 1.814765593942021e-04;
    C2522 = 8.900998138795161e-03;
    C2531 = -1.540426629010665e-03;
    C3411 = 1.984752801158255e-03;
    C3412 = -3.025526226761935e-03;
    C3421 = 1.615989110069521e-03;
    C3413 = -1.425893657679279e-03;
    C3422 = 3.266039287027350e-04;
    C3431 = 3.316153117377203e-07;
    C3511 = 3.438836740827667e-04;
    C3512 = 1.731930338566707e-03;
    C3521 = -1.878272615507301e-03;
    C3513 = -7.174514458996061e-03;
    C3522 = 3.761189462635207e-02;
    C3531 = -7.080207817827572e-03;
    break;
  }
  // C0111 = 0;
  // C0112 = 0;
  // C0121 = 0;
  // C0113 = 0;
  // C0122 =0;
  // C0131 =0;
  // C0211 =0;
  // C0212 =0;
  // C0221 = 0;
  // C0213 = 0;
  // C0222 =0;
  // C0231 =0;
  // C0311 =0;
  // C0312 = 0;
  // C0321 =0;
  // C0313 = 0;
  // C0322 =0;
  // C0331 =0;
  // C0411 =0;
  // C0412 =0;
  // C0421 =0;
  // C0413 =0;
  // C0422 = 0;
  // C0431 =0;
  // C0511 = 0;
  // C0512 = 0;
  // C0521 =0;
  // C0513 = 0;
  // C0522 = 0;
  // C0531 =0;
  // C2311 = 0;
  // C2312 = 0;
  // C2321 = 0;
  // C2313 = 0;
  // C2322 =0;
  // C2331 = 0;
  // C2411 = 0;
  // C2412 =0;
  // C2421 =0;
  // C2413 =0;
  // C2422 =0;
  // C2431 =0;
  // C2511 = 0;
  // C2512 = 0;
  // C2521 =0;
  // C2513 =0;
  // C2522 = 0;
  // C2531 = 0;
  // C3411 = 0;
  // C3412 =0;
  // C3421 =0;
  // C3413 = 0;
  // C3422 = 0;
  // C3431 =0;
  // C3511 =0;
  // C3512 =0;
  // C3521 = 0;
  // C3513 = 0;
  // C3522 = 0;
  // C3531 = 0;
  // density *= 0.1;
}

void FittedMaterial::clamp_strains(Vec6 &ek, std::vector<int> &clamped_coords,
                                   std::vector<double> &dek) {
  // return;
  for (int i = 0; i < 6; ++i) {
    if (ek[i] < ek_min[i]) {
      clamped_coords.push_back(i);
      dek.push_back(ek[i] - ek_min[i]); // (ek - ekclamped)
      ek[i] = ek_min[i];
      // std::cout<<"clamping min "<<i<<" w distance "<<ek[i] - ek_min[i]<<"\n";
    } else if (ek[i] > ek_max[i]) {
      clamped_coords.push_back(i);
      dek.push_back(ek[i] - ek_max[i]); // (ek - ekclamped)
      ek[i] = ek_max[i];
      // std::cout<<"clamping max "<<i<<" w distance "<<ek[i] - ek_min[i]<<"\n";
    }
  }
}

#include <iostream>
double FittedMaterial::psi(const Vec6 &ek) {
  Vec6 ekclamped = ek;
  std::vector<int> clamped_coords;
  clamped_coords.reserve(6);
  std::vector<double> dek; // (ei - clamped(ei)) Taylor distance
  dek.reserve(6);
  clamp_strains(ekclamped, clamped_coords, dek);

  double out = 0;

  // if unclamped dek is 0 and only actual energy remains
  // psi(ek + dek) = psi(ek) + dpsid_i(ek) * dek_i + 0.5 * dpsidd_i(ek) *
  // dek_i^2
  out = psi_taylor_0(
      ekclamped); //  const taylor part, actual energy if not clamped
  for (size_t i = 0; i < clamped_coords.size(); i++) {
    int coord = clamped_coords[i];
    double d = dek[i];

    //
    // std::cout<<"clamping "<<i<<" w distance "<<d<<"\n"
    std::pair<double, double> psi_D = psi_taylor_12_i(ekclamped, coord);

    double tgrad = psi_D.first;
    if (d < 0)
      tgrad = std::min(-min_taylor_grad, tgrad);
    else
      tgrad = std::max(min_taylor_grad, tgrad);
    double crv = psi_D.second;
    crv = std::max(min_taylor_hess, crv);
    out += tgrad * d + crv * (0.5 * d * d);
  }

  return out;
}

Vec6 FittedMaterial::psi_grad(const Vec6 &ek) {
  Vec6 ekclamped = ek;
  std::vector<int> clamped_coords;
  clamped_coords.reserve(6);
  std::vector<double> dek; // (ei - clamped(ei)) Taylor distance
  dek.reserve(6);
  clamp_strains(ekclamped, clamped_coords, dek);

  Vec6 out(0);
  out = grad_taylor_0(
      ekclamped); //  const taylor part, actual energy if not clamped
  for (size_t i = 0; i < clamped_coords.size(); i++) {
    int coord = clamped_coords[i];
    double d = dek[i];

    std::pair<Vec6, Vec6> grad_D = grad_taylor_12_i(ekclamped, coord);

    Vec6 tgrad = grad_D.first;
    if (d < 0)
      for (int i = 0; i < 6; ++i)
        tgrad(i) = std::min(-min_taylor_grad, tgrad(i));
    else
      for (int i = 0; i < 6; ++i)
        tgrad(i) = std::max(min_taylor_grad, tgrad(i));
    Vec6 crv = grad_D.second;
    for (int i = 0; i < 6; ++i)
      crv(i) = std::max(min_taylor_hess, crv(i));
    out += tgrad * d + crv * (0.5 * d * d);
  }
  return out;
}

std::pair<Mat6x6, Vec6> FittedMaterial::psi_drv(const Vec6 &ek) {

  Vec6 ekclamped = ek;
  std::vector<int> clamped_coords;
  clamped_coords.reserve(6);
  std::vector<double> dek; // (ei - clamped(ei)) Taylor distance
  dek.reserve(6);
  clamp_strains(ekclamped, clamped_coords, dek);

  Mat6x6 hess(0);
  Vec6 grad(0);

  auto gh0 = gradhess_taylor_0(
      ekclamped); //  const taylor part, actual energy if not clamped
  hess += gh0.first;
  grad += gh0.second;
  for (size_t i = 0; i < clamped_coords.size(); i++) {
    int coord = clamped_coords[i];
    double d = dek[i];

    // {{hD,gD},{hDD,gDD}}
    auto gh_D = gradhess_taylor_12_i(ekclamped, coord);

    Vec6 tgradgrad = gh_D.first.second;
    Mat6x6 tgradhess = gh_D.first.first;
    if (d < 0) {
      for (int i = 0; i < 6; ++i)
        tgradgrad(i) = std::min(-min_taylor_grad, tgradgrad(i));
      for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++i)
          tgradhess(i, j) = std::min(-min_taylor_grad, tgradhess(i, j));
    } else {
      for (int i = 0; i < 6; ++i)
        tgradgrad(i) = std::max(min_taylor_grad, tgradgrad(i));
      for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++i)
          tgradhess(i, j) = std::max(min_taylor_grad, tgradhess(i, j));
    }

    Vec6 crvgrad = gh_D.second.second;
    for (int i = 0; i < 6; ++i)
      crvgrad(i) = std::max(min_taylor_hess, crvgrad(i));
    Mat6x6 crvhess = gh_D.second.first;
    for (int i = 0; i < 6; ++i)
      for (int j = 0; j < 6; ++i)
        crvhess(i, j) = std::max(min_taylor_hess, crvhess(i, j));

    hess += tgradhess * d + crvhess * (0.5 * d * d);
    grad += tgradgrad * d + crvgrad * (0.5 * d * d);
  }

  return std::make_pair(hess, grad);
}
