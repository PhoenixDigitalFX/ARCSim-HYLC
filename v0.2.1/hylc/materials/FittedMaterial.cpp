#include "FittedMaterial.hpp"

using namespace hylc;
using namespace hylc::mathematica;

#include <iostream>
FittedMaterial::FittedMaterial(int type) {
  std::cout << "Loading Material " << type << "\n";
  switch (type) {
  default:
  case 0: // knit: slipstitchhoney
    density = 4.8530851068e-01;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499895929000000e+01;
    ekscale[4] = 2.830914444500000e+01;
    ekscale[5] = 4.499890999000000e+01;
    C0 = 4.718551958516539e-04;
    C01 = 1.021869010671862e-03;
    C02 = 1.192210183138594e-02;
    C03 = 3.640235525652275e-03;
    C04 = -2.181955872425724e-03;
    C11 = -5.501177462207649e-04;
    C12 = 3.929860445758271e-03;
    C13 = 9.605151021474313e-05;
    C14 = 9.348031942415463e-05;
    C21 = 1.405538408381210e-04;
    C22 = 4.869755126891468e-03;
    C23 = 4.069401405970608e-03;
    C24 = 1.562120632587678e-03;
    C31 = 1.281750255813433e-03;
    C32 = 5.976378067988489e-03;
    C33 = 1.013184542968030e-03;
    C34 = -4.628764072495189e-04;
    C41 = 3.404982842158995e-04;
    C42 = 1.749156879606522e-03;
    C43 = 2.459041972736625e-04;
    C44 = 9.439346992520677e-04;
    C51 = 2.365357351660408e-04;
    C52 = 1.404282615367256e-03;
    C53 = 4.736725618850221e-04;
    C54 = 3.783154759499993e-04;
    C0111 = -3.891901642030480e-04;
    C0112 = -8.666743163347497e-04;
    C0121 = 2.882192486423884e-04;
    C0113 = -2.325383153443422e-04;
    C0122 = 4.255852347602786e-04;
    C0131 = -2.094251760604327e-04;
    C0211 = 2.773461523715269e-03;
    C0212 = 2.969415472096996e-03;
    C0221 = 1.106008426354729e-02;
    C0213 = 5.563094135068408e-04;
    C0222 = 7.353556401912869e-03;
    C0231 = -3.039158368234878e-03;
    C0311 = 6.160825387440619e-03;
    C0312 = 1.631534502495171e-03;
    C0321 = 3.842512463832297e-03;
    C0313 = -2.191235101541562e-03;
    C0322 = -3.913413050216186e-03;
    C0331 = -2.738710620435184e-03;
    C0411 = -2.405493251351037e-03;
    C0412 = -5.075758795533869e-03;
    C0421 = 1.326693948086140e-04;
    C0413 = -1.078522312616665e-04;
    C0422 = -1.104866253091320e-03;
    C0431 = 7.982659146933070e-04;
    C0511 = 7.427910756445644e-05;
    C0512 = 3.384762267234393e-04;
    C0521 = -8.416246860944136e-04;
    C0513 = -9.528909622874801e-05;
    C0522 = 7.228850671939378e-04;
    C0531 = 5.454608421817282e-04;
    C2311 = 5.025590058599899e-04;
    C2312 = 1.267618852141296e-03;
    C2321 = 1.547828589571340e-03;
    C2313 = -8.594683064797540e-04;
    C2322 = 1.200604777255690e-03;
    C2331 = 4.996319231658187e-04;
    C2411 = 2.828244194246521e-05;
    C2412 = -1.253748484233669e-03;
    C2421 = -8.465258051943176e-04;
    C2413 = 6.875417112647519e-04;
    C2422 = -2.203947275257861e-03;
    C2431 = 4.024768381773539e-04;
    C2511 = -1.177290138512853e-03;
    C2512 = -1.319714646845781e-03;
    C2521 = 1.478599034646930e-03;
    C2513 = -5.427870262526849e-04;
    C2522 = 1.620189845478275e-03;
    C2531 = -1.318764979232923e-03;
    C3411 = 8.181813433505009e-04;
    C3412 = -5.498767449332686e-05;
    C3421 = -3.871161864055644e-04;
    C3413 = 1.842598537048326e-04;
    C3422 = -7.291610057731129e-04;
    C3431 = 5.031266811812540e-04;
    C3511 = -6.235124052075159e-05;
    C3512 = 7.463287288720689e-04;
    C3521 = 1.697739586783257e-03;
    C3513 = 5.516360003180168e-04;
    C3522 = 4.609052884157664e-03;
    C3531 = 1.688303754205380e-03;
    break;
  case 1: // knit: slipstitchrib
    density = 1.3852413106e+00;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499767134000000e+01;
    ekscale[4] = 2.691437711500000e+01;
    ekscale[5] = 4.499779783000000e+01;
    C0 = 1.054263501499052e+00;
    C01 = -1.643486653790452e-02;
    C02 = 2.065990601358705e-01;
    C03 = 4.409167906442002e-03;
    C04 = -3.705387617107397e-02;
    C11 = -7.212373678183748e-02;
    C12 = 1.528507507927347e-01;
    C13 = -2.493979991091431e-02;
    C14 = 1.606282335342883e-03;
    C21 = -4.687986829838825e-02;
    C22 = 3.515427954766976e-01;
    C23 = -1.169869346042549e-01;
    C24 = 1.008079480166624e-02;
    C31 = 9.751193123676101e-02;
    C32 = 5.987424331118356e-02;
    C33 = 8.248140050058056e-03;
    C34 = 2.991391068228848e-03;
    C41 = 3.182452198304746e-02;
    C42 = 7.144681358945972e-02;
    C43 = -8.605662110366868e-03;
    C44 = 8.502634455180030e-02;
    C51 = 6.527506692502591e-02;
    C52 = 9.941263496982031e-02;
    C53 = -2.198571882073260e-02;
    C54 = 4.541217184989560e-03;
    C0111 = -6.628424638945743e-02;
    C0112 = -7.858359510592705e-02;
    C0121 = 2.786486385074624e-02;
    C0113 = 1.655788633491900e-02;
    C0122 = -8.036569413919144e-03;
    C0131 = -2.379256186700408e-02;
    C0211 = 1.561301496487792e-01;
    C0212 = 4.450752212636308e-03;
    C0221 = 6.574175891294869e-02;
    C0213 = -5.036349210323486e-03;
    C0222 = -4.918221673911618e-02;
    C0231 = -6.818248536952026e-02;
    C0311 = -1.348491362879594e-01;
    C0312 = -4.376212706128048e-02;
    C0321 = 6.285858353296851e-02;
    C0313 = -8.377680109384012e-03;
    C0322 = 4.780700058305829e-03;
    C0331 = -7.441319691672640e-03;
    C0411 = 4.112692719336730e-02;
    C0412 = -1.565604484713203e-01;
    C0421 = 2.605777059312564e-02;
    C0413 = -9.942458282491184e-03;
    C0422 = -2.120129014384063e-02;
    C0431 = -2.404934942543891e-02;
    C0511 = -5.426372122557042e-02;
    C0512 = -1.761801819484335e-02;
    C0521 = 2.077817820426327e-02;
    C0513 = 1.087394491335041e-02;
    C0522 = 2.963728090408353e-03;
    C0531 = 6.833794226813732e-04;
    C2311 = -1.945122324487720e-02;
    C2312 = -3.318470035532912e-03;
    C2321 = 4.697840981447721e-02;
    C2313 = -4.687502304867140e-03;
    C2322 = -5.153689444675863e-03;
    C2331 = -3.157127997285510e-02;
    C2411 = -9.350679928668412e-04;
    C2412 = -2.660602250074339e-01;
    C2421 = 1.281598866025125e-02;
    C2413 = 5.104473338811468e-03;
    C2422 = 5.820926564722646e-02;
    C2431 = -1.712815878637003e-02;
    C2511 = -1.109181759684527e-02;
    C2512 = -8.953356746587114e-02;
    C2521 = -1.046443183774677e-02;
    C2513 = 2.462401431708253e-02;
    C2522 = 3.260917181982144e-02;
    C2531 = 2.520873094327755e-02;
    C3411 = -6.742727255662164e-04;
    C3412 = 5.546098668103415e-02;
    C3421 = 1.025068516481355e-02;
    C3413 = 1.454950512712015e-03;
    C3422 = -3.611904482105619e-03;
    C3431 = 9.033662876106121e-03;
    C3511 = -2.297634235554923e-02;
    C3512 = 2.565380349910345e-02;
    C3521 = -1.023161297057252e-01;
    C3513 = -9.499091629349465e-02;
    C3522 = 5.316768150539140e-01;
    C3531 = -3.676612335112971e-02;
    break;
  case 2: // woven: basket2_2
    density = 7.3281131170e-02;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 5.999603178000000e+02;
    ekscale[4] = 2.756886673000000e+02;
    ekscale[5] = 5.999609855000000e+02;
    C0 = 6.136959211472631e-02;
    C01 = 9.772565564108804e-04;
    C02 = 7.587445277273594e-02;
    C03 = -5.922856928447810e-04;
    C04 = -1.139613287020674e-02;
    C11 = -2.656021673212524e-04;
    C12 = 1.290125111010594e-02;
    C13 = 5.970433292159094e-06;
    C14 = 2.633995881432875e-03;
    C21 = -5.891973087733153e-03;
    C22 = 7.391681120935974e-02;
    C23 = 3.385469886268185e-03;
    C24 = -1.323518441821058e-02;
    C31 = -4.306120219805982e-04;
    C32 = 1.118066700931150e-02;
    C33 = 2.701886467075081e-04;
    C34 = 2.075231103919380e-03;
    C41 = -4.512376282744367e-05;
    C42 = -9.039408875314854e-03;
    C43 = -2.741788767522702e-05;
    C44 = 5.195135683330288e-03;
    C51 = 1.243497003364143e-04;
    C52 = 1.101553449924861e-02;
    C53 = -9.528691258083933e-05;
    C54 = 1.794913889322296e-03;
    C0111 = 1.502078720802803e-04;
    C0112 = -1.554268020809303e-02;
    C0121 = -5.778035061280652e-04;
    C0113 = -4.893869443797544e-05;
    C0122 = 7.949891333384600e-03;
    C0131 = 4.108265022846758e-04;
    C0211 = 5.429090369225512e-03;
    C0212 = -1.631895400645289e-02;
    C0221 = -1.556662304083416e-02;
    C0213 = 9.883557514526253e-03;
    C0222 = 6.770421362344640e-03;
    C0231 = 9.382448221084062e-03;
    C0311 = -1.373967163346879e-03;
    C0312 = -1.224787962472369e-02;
    C0321 = 8.439432910071874e-03;
    C0313 = -1.251211387048241e-03;
    C0322 = 2.859579804573267e-03;
    C0331 = -6.796050160215907e-03;
    C0411 = -3.019370260145414e-04;
    C0412 = -1.660697819092017e-02;
    C0421 = 4.996459419893028e-04;
    C0413 = 8.663886785614270e-05;
    C0422 = -4.106665293819085e-03;
    C0431 = -1.919026022837766e-04;
    C0511 = -2.292070191674317e-05;
    C0512 = -9.987443336825273e-03;
    C0521 = -2.625135147993046e-04;
    C0513 = 3.427769971072714e-05;
    C0522 = 1.182584191692849e-02;
    C0531 = 2.278584759182704e-04;
    C2311 = 2.030635084556369e-04;
    C2312 = -1.034897743482782e-02;
    C2321 = 5.782916839935484e-04;
    C2313 = -1.608337534371439e-04;
    C2322 = 1.161252177593013e-02;
    C2331 = -5.924174961916591e-04;
    C2411 = 3.446570421544148e-04;
    C2412 = -1.770873666922038e-02;
    C2421 = -1.133026242361172e-04;
    C2413 = -1.423283839097377e-04;
    C2422 = -3.815189419687455e-03;
    C2431 = -1.215236963364148e-04;
    C2511 = 1.104526928463252e-03;
    C2512 = -7.390581636054529e-03;
    C2521 = -3.375425450762292e-03;
    C2513 = 1.151592957269036e-04;
    C2522 = -1.854858534590815e-03;
    C2531 = 2.384569590847989e-03;
    C3411 = -1.250741370935213e-04;
    C3412 = 1.901640809517287e-04;
    C3421 = 2.690050171275099e-04;
    C3413 = 1.645865230338659e-04;
    C3422 = 2.748298273466060e-03;
    C3431 = -5.734357275042974e-05;
    C3511 = 4.878755560239309e-03;
    C3512 = 9.740750387766640e-04;
    C3521 = -1.066572470265899e-03;
    C3513 = -2.459163311749889e-02;
    C3522 = 2.388901341163707e-01;
    C3531 = -2.812445003777088e-02;
    break;
  case 3: // woven: twill2_1
    density = 7.2490697884e-02;
    ekscale[0] = 5.000000000000000e-01;
    ekscale[1] = 3.000000000000000e-01;
    ekscale[2] = 5.000000000000000e-01;
    ekscale[3] = 4.499903360000000e+02;
    ekscale[4] = 2.395935517000000e+02;
    ekscale[5] = 4.499903967000000e+02;
    C0 = 1.184289278645800e-01;
    C01 = -1.294075018552924e-03;
    C02 = 8.938751474758191e-02;
    C03 = -4.013132741337273e-02;
    C04 = 1.347943051834955e-02;
    C11 = 2.185656662130380e-02;
    C12 = 2.244160721364973e-02;
    C13 = 2.576338356146874e-03;
    C14 = 2.012990871687447e-03;
    C21 = -3.637179648935582e-03;
    C22 = 8.923748355803193e-02;
    C23 = -3.888575202063752e-02;
    C24 = 1.201580945516589e-02;
    C31 = -8.249584819765374e-03;
    C32 = 6.313572075688911e-03;
    C33 = 4.400713515760835e-05;
    C34 = 7.058714053740652e-04;
    C41 = -1.624764010006863e-04;
    C42 = -2.730534852742290e-03;
    C43 = -2.975312946149973e-04;
    C44 = 2.309282097017429e-03;
    C51 = 7.555275102194766e-03;
    C52 = 6.465105922760114e-03;
    C53 = 1.052914025462130e-04;
    C54 = 6.536406418436623e-04;
    C0111 = -2.254874219224598e-02;
    C0112 = -2.310121775295810e-02;
    C0121 = 8.607548404323226e-03;
    C0113 = -5.768223261023183e-04;
    C0122 = 1.024824029973316e-02;
    C0131 = 5.563516327910206e-05;
    C0211 = 3.142690314876349e-03;
    C0212 = -4.096491913054942e-03;
    C0221 = -6.204673362879250e-03;
    C0213 = 1.075620536018410e-03;
    C0222 = 2.832837636355542e-03;
    C0231 = 2.683418972962802e-03;
    C0311 = -6.679629172760059e-03;
    C0312 = -1.168503417758775e-02;
    C0321 = -4.805535519913080e-05;
    C0313 = -3.628075459832539e-04;
    C0322 = 8.802958970813016e-03;
    C0331 = 1.429804196835897e-03;
    C0411 = 3.284998857285002e-03;
    C0412 = -2.307617623537304e-02;
    C0421 = 9.031886924799729e-03;
    C0413 = -3.350731505615294e-04;
    C0422 = 1.146959562262590e-02;
    C0431 = -7.211963974210297e-03;
    C0511 = -4.350064714511139e-04;
    C0512 = -1.059136659450452e-03;
    C0521 = 1.536962362801442e-03;
    C0513 = -3.086386799568480e-06;
    C0522 = 3.882446378988071e-04;
    C0531 = -7.359405958152678e-04;
    C2311 = 7.567681456719473e-04;
    C2312 = -1.167977982525345e-03;
    C2321 = -1.753536149961190e-03;
    C2313 = -9.730340540275789e-05;
    C2322 = 4.115617432953657e-04;
    C2331 = 8.095140554433467e-04;
    C2411 = -1.105087373517883e-03;
    C2412 = -2.423697642136310e-02;
    C2421 = -1.009431967437101e-02;
    C2413 = 4.772927847114199e-04;
    C2422 = 1.214821835907113e-02;
    C2431 = 6.934257191553978e-03;
    C2511 = 6.148958934171084e-03;
    C2512 = -1.192800223608082e-02;
    C2521 = 8.746296903741769e-04;
    C2513 = 1.814765593942021e-04;
    C2522 = 8.900998138795161e-03;
    C2531 = -1.540426629010665e-03;
    C3411 = 1.984752801158255e-03;
    C3412 = -3.025526226761935e-03;
    C3421 = 1.615989110069521e-03;
    C3413 = -1.425893657679279e-03;
    C3422 = 3.266039287027350e-04;
    C3431 = 3.316153117377203e-07;
    C3511 = 3.438836740827667e-04;
    C3512 = 1.731930338566707e-03;
    C3521 = -1.878272615507301e-03;
    C3513 = -7.174514458996061e-03;
    C3522 = 3.761189462635207e-02;
    C3531 = -7.080207817827572e-03;
    break;
  }
}

double FittedMaterial::psi(const Vec6 &ek) {
  Real c1 = ek(0);
  Real c2 = -1 + c1;
  Real c10 = ekscale(0);
  Real c23 = ek(1);
  Real c25 = ekscale(1);
  Real c28 = Power(c23, 3);
  Real c21 = 1 / c10;
  Real c29 = Power(c25, -3);
  Real c17 = Power(c2, 2);
  Real c32 = Power(c23, 2);
  Real c18 = Power(c10, -2);
  Real c33 = Power(c25, -2);
  Real c14 = Power(c2, 3);
  Real c15 = Power(c10, -3);
  Real c37 = 1 / c25;
  Real c43 = ek(2);
  Real c44 = -1 + c43;
  Real c46 = ekscale(2);
  Real c49 = Power(c44, 3);
  Real c50 = Power(c46, -3);
  Real c53 = Power(c44, 2);
  Real c54 = Power(c46, -2);
  Real c58 = 1 / c46;
  Real c63 = ek(3);
  Real c65 = ekscale(3);
  Real c68 = Power(c63, 3);
  Real c69 = Power(c65, -3);
  Real c73 = Power(c63, 2);
  Real c74 = Power(c65, -2);
  Real c80 = 1 / c65;
  Real c88 = ek(4);
  Real c90 = ekscale(4);
  Real c93 = Power(c88, 3);
  Real c94 = Power(c90, -3);
  Real c99 = Power(c88, 2);
  Real c100 = Power(c90, -2);
  Real c108 = 1 / c90;
  Real c119 = ek(5);
  Real c121 = ekscale(5);
  Real c124 = Power(c119, 3);
  Real c125 = Power(c121, -3);
  Real c130 = Power(c119, 2);
  Real c131 = Power(c121, -2);
  Real c139 = 1 / c121;
  return C0 + (C54 * Power(c119, 4)) / Power(c121, 4) + C53 * c124 * c125 +
         C52 * c130 * c131 + C51 * c119 * c139 + C03 * c14 * c15 +
         C0531 * c119 * c139 * c14 * c15 + C02 * c17 * c18 +
         C0522 * c130 * c131 * c17 * c18 + C0521 * c119 * c139 * c17 * c18 +
         (C04 * Power(c2, 4)) / Power(c10, 4) + C01 * c2 * c21 +
         C0513 * c124 * c125 * c2 * c21 + C0512 * c130 * c131 * c2 * c21 +
         C0511 * c119 * c139 * c2 * c21 +
         (C14 * Power(c23, 4)) / Power(c25, 4) + C13 * c28 * c29 +
         C0113 * c2 * c21 * c28 * c29 + C12 * c32 * c33 +
         C0122 * c17 * c18 * c32 * c33 + C0112 * c2 * c21 * c32 * c33 +
         C11 * c23 * c37 + C0131 * c14 * c15 * c23 * c37 +
         C0121 * c17 * c18 * c23 * c37 + C0111 * c2 * c21 * c23 * c37 +
         (C24 * Power(c44, 4)) / Power(c46, 4) + C23 * c49 * c50 +
         C2531 * c119 * c139 * c49 * c50 + C0213 * c2 * c21 * c49 * c50 +
         C22 * c53 * c54 + C2522 * c130 * c131 * c53 * c54 +
         C2521 * c119 * c139 * c53 * c54 + C0222 * c17 * c18 * c53 * c54 +
         C0212 * c2 * c21 * c53 * c54 + C21 * c44 * c58 +
         C2513 * c124 * c125 * c44 * c58 + C2512 * c130 * c131 * c44 * c58 +
         C2511 * c119 * c139 * c44 * c58 + C0231 * c14 * c15 * c44 * c58 +
         C0221 * c17 * c18 * c44 * c58 + C0211 * c2 * c21 * c44 * c58 +
         (C34 * Power(c63, 4)) / Power(c65, 4) + C33 * c68 * c69 +
         C3531 * c119 * c139 * c68 * c69 + C0313 * c2 * c21 * c68 * c69 +
         C2313 * c44 * c58 * c68 * c69 + C32 * c73 * c74 +
         C3522 * c130 * c131 * c73 * c74 + C3521 * c119 * c139 * c73 * c74 +
         C0322 * c17 * c18 * c73 * c74 + C0312 * c2 * c21 * c73 * c74 +
         C2322 * c53 * c54 * c73 * c74 + C2312 * c44 * c58 * c73 * c74 +
         C31 * c63 * c80 + C3513 * c124 * c125 * c63 * c80 +
         C3512 * c130 * c131 * c63 * c80 + C3511 * c119 * c139 * c63 * c80 +
         C0331 * c14 * c15 * c63 * c80 + C0321 * c17 * c18 * c63 * c80 +
         C0311 * c2 * c21 * c63 * c80 + C2331 * c49 * c50 * c63 * c80 +
         C2321 * c53 * c54 * c63 * c80 + C2311 * c44 * c58 * c63 * c80 +
         C41 * c108 * c88 + C0431 * c108 * c14 * c15 * c88 +
         C0421 * c108 * c17 * c18 * c88 + C0411 * c108 * c2 * c21 * c88 +
         C2431 * c108 * c49 * c50 * c88 + C2421 * c108 * c53 * c54 * c88 +
         C2411 * c108 * c44 * c58 * c88 + C3431 * c108 * c68 * c69 * c88 +
         C3421 * c108 * c73 * c74 * c88 + C3411 * c108 * c63 * c80 * c88 +
         (C44 * Power(c88, 4)) / Power(c90, 4) + C43 * c93 * c94 +
         C0413 * c2 * c21 * c93 * c94 + C2413 * c44 * c58 * c93 * c94 +
         C3413 * c63 * c80 * c93 * c94 + C42 * c100 * c99 +
         C0422 * c100 * c17 * c18 * c99 + C0412 * c100 * c2 * c21 * c99 +
         C2422 * c100 * c53 * c54 * c99 + C2412 * c100 * c44 * c58 * c99 +
         C3422 * c100 * c73 * c74 * c99 + C3412 * c100 * c63 * c80 * c99;
}

Vec6 FittedMaterial::psi_grad(const Vec6 &ek) {
  Vec6 out(0);

  Real c9 = ek(0);
  Real c10 = -1 + c9;
  Real c1 = ekscale(0);
  Real c18 = Power(c1, 3);
  Real c21 = ek(1);
  Real c16 = Power(c1, 2);
  Real c23 = ekscale(1);
  Real c26 = Power(c21, 2);
  Real c27 = Power(c23, -2);
  Real c14 = Power(c10, 2);
  Real c30 = 1 / c23;
  Real c34 = ek(2);
  Real c35 = -1 + c34;
  Real c37 = ekscale(2);
  Real c40 = Power(c35, 2);
  Real c42 = Power(c37, -2);
  Real c45 = 1 / c37;
  Real c49 = ek(3);
  Real c51 = ekscale(3);
  Real c54 = Power(c49, 2);
  Real c55 = Power(c51, -2);
  Real c58 = 1 / c51;
  Real c62 = ek(4);
  Real c64 = ekscale(4);
  Real c67 = Power(c62, 2);
  Real c68 = Power(c64, -2);
  Real c71 = 1 / c64;
  Real c75 = ek(5);
  Real c77 = ekscale(5);
  Real c80 = Power(c75, 2);
  Real c81 = Power(c77, -2);
  Real c84 = 1 / c77;
  Real c22 = Power(c21, 3);
  Real c95 = Power(c23, 2);
  Real c93 = 1 / c1;
  Real c11 = Power(c10, 3);
  Real c100 = Power(c23, 3);
  Real c97 = Power(c1, -2);
  Real c36 = Power(c35, 3);
  Real c112 = Power(c37, 2);
  Real c102 = Power(c1, -3);
  Real c116 = Power(c37, 3);
  Real c50 = Power(c49, 3);
  Real c52 = Power(c51, -3);
  Real c63 = Power(c62, 3);
  Real c65 = Power(c64, -3);
  Real c76 = Power(c75, 3);
  Real c78 = Power(c77, -3);
  Real c146 = Power(c51, 2);
  Real c152 = Power(c51, 3);
  Real c38 = Power(c37, -3);
  Real c180 = Power(c64, 2);
  Real c188 = Power(c64, 3);
  Real c207 = Power(c77, 2);
  Real c215 = Power(c77, 3);
  out(0) =
      (4 * C04 * c11 + 3 * C03 * c1 * c14 + 2 * C02 * c10 * c16 + C01 * c18 +
       (C0113 * c18 * c22) / Power(c23, 3) + 2 * C0122 * c10 * c16 * c26 * c27 +
       C0112 * c18 * c26 * c27 + 3 * C0131 * c1 * c14 * c21 * c30 +
       2 * C0121 * c10 * c16 * c21 * c30 + C0111 * c18 * c21 * c30 +
       C0213 * c18 * c36 * c38 + 2 * C0222 * c10 * c16 * c40 * c42 +
       C0212 * c18 * c40 * c42 + 3 * C0231 * c1 * c14 * c35 * c45 +
       2 * C0221 * c10 * c16 * c35 * c45 + C0211 * c18 * c35 * c45 +
       C0313 * c18 * c50 * c52 + 2 * C0322 * c10 * c16 * c54 * c55 +
       C0312 * c18 * c54 * c55 + 3 * C0331 * c1 * c14 * c49 * c58 +
       2 * C0321 * c10 * c16 * c49 * c58 + C0311 * c18 * c49 * c58 +
       C0413 * c18 * c63 * c65 + 2 * C0422 * c10 * c16 * c67 * c68 +
       C0412 * c18 * c67 * c68 + 3 * C0431 * c1 * c14 * c62 * c71 +
       2 * C0421 * c10 * c16 * c62 * c71 + C0411 * c18 * c62 * c71 +
       C0513 * c18 * c76 * c78 + 2 * C0522 * c10 * c16 * c80 * c81 +
       C0512 * c18 * c80 * c81 + 3 * C0531 * c1 * c14 * c75 * c84 +
       2 * C0521 * c10 * c16 * c75 * c84 + C0511 * c18 * c75 * c84) /
      Power(c1, 4);
  out(1) = (C11 * c100 + C0131 * c100 * c102 * c11 + 4 * C14 * c22 +
            3 * C13 * c23 * c26 + C0111 * c10 * c100 * c93 +
            3 * C0113 * c10 * c23 * c26 * c93 + 2 * C12 * c21 * c95 +
            2 * C0112 * c10 * c21 * c93 * c95 + C0121 * c100 * c14 * c97 +
            2 * C0122 * c14 * c21 * c95 * c97) /
           Power(c23, 4);
  out(2) =
      (C21 * c116 + C0231 * c102 * c11 * c116 + 2 * C22 * c112 * c35 +
       4 * C24 * c36 + 3 * C23 * c37 * c40 + C2313 * c116 * c50 * c52 +
       C2312 * c116 * c54 * c55 + 2 * C2322 * c112 * c35 * c54 * c55 +
       C2311 * c116 * c49 * c58 + 2 * C2321 * c112 * c35 * c49 * c58 +
       3 * C2331 * c37 * c40 * c49 * c58 + C2413 * c116 * c63 * c65 +
       C2412 * c116 * c67 * c68 + 2 * C2422 * c112 * c35 * c67 * c68 +
       C2411 * c116 * c62 * c71 + 2 * C2421 * c112 * c35 * c62 * c71 +
       3 * C2431 * c37 * c40 * c62 * c71 + C2513 * c116 * c76 * c78 +
       C2512 * c116 * c80 * c81 + 2 * C2522 * c112 * c35 * c80 * c81 +
       C2511 * c116 * c75 * c84 + 2 * C2521 * c112 * c35 * c75 * c84 +
       3 * C2531 * c37 * c40 * c75 * c84 + C0211 * c10 * c116 * c93 +
       2 * C0212 * c10 * c112 * c35 * c93 + 3 * C0213 * c10 * c37 * c40 * c93 +
       C0221 * c116 * c14 * c97 + 2 * C0222 * c112 * c14 * c35 * c97) /
      Power(c37, 4);
  out(3) =
      (C31 * c152 + C0331 * c102 * c11 * c152 + C2331 * c152 * c36 * c38 +
       C2321 * c152 * c40 * c42 + C2311 * c152 * c35 * c45 +
       2 * C32 * c146 * c49 + 2 * C2322 * c146 * c40 * c42 * c49 +
       2 * C2312 * c146 * c35 * c45 * c49 + 4 * C34 * c50 +
       3 * C33 * c51 * c54 + 3 * C2313 * c35 * c45 * c51 * c54 +
       C3413 * c152 * c63 * c65 + C3412 * c152 * c67 * c68 +
       2 * C3422 * c146 * c49 * c67 * c68 + C3411 * c152 * c62 * c71 +
       2 * C3421 * c146 * c49 * c62 * c71 + 3 * C3431 * c51 * c54 * c62 * c71 +
       C3513 * c152 * c76 * c78 + C3512 * c152 * c80 * c81 +
       2 * C3522 * c146 * c49 * c80 * c81 + C3511 * c152 * c75 * c84 +
       2 * C3521 * c146 * c49 * c75 * c84 + 3 * C3531 * c51 * c54 * c75 * c84 +
       C0311 * c10 * c152 * c93 + 2 * C0312 * c10 * c146 * c49 * c93 +
       3 * C0313 * c10 * c51 * c54 * c93 + C0321 * c14 * c152 * c97 +
       2 * C0322 * c14 * c146 * c49 * c97) /
      Power(c51, 4);
  out(4) =
      (C41 * c188 + C0431 * c102 * c11 * c188 + C2431 * c188 * c36 * c38 +
       C2421 * c188 * c40 * c42 + C2411 * c188 * c35 * c45 +
       C3431 * c188 * c50 * c52 + C3421 * c188 * c54 * c55 +
       C3411 * c188 * c49 * c58 + 2 * C42 * c180 * c62 +
       2 * C2422 * c180 * c40 * c42 * c62 + 2 * C2412 * c180 * c35 * c45 * c62 +
       2 * C3422 * c180 * c54 * c55 * c62 + 2 * C3412 * c180 * c49 * c58 * c62 +
       4 * C44 * c63 + 3 * C43 * c64 * c67 + 3 * C2413 * c35 * c45 * c64 * c67 +
       3 * C3413 * c49 * c58 * c64 * c67 + C0411 * c10 * c188 * c93 +
       2 * C0412 * c10 * c180 * c62 * c93 + 3 * C0413 * c10 * c64 * c67 * c93 +
       C0421 * c14 * c188 * c97 + 2 * C0422 * c14 * c180 * c62 * c97) /
      Power(c64, 4);
  out(5) =
      (C51 * c215 + C0531 * c102 * c11 * c215 + C2531 * c215 * c36 * c38 +
       C2521 * c215 * c40 * c42 + C2511 * c215 * c35 * c45 +
       C3531 * c215 * c50 * c52 + C3521 * c215 * c54 * c55 +
       C3511 * c215 * c49 * c58 + 2 * C52 * c207 * c75 +
       2 * C2522 * c207 * c40 * c42 * c75 + 2 * C2512 * c207 * c35 * c45 * c75 +
       2 * C3522 * c207 * c54 * c55 * c75 + 2 * C3512 * c207 * c49 * c58 * c75 +
       4 * C54 * c76 + 3 * C53 * c77 * c80 + 3 * C2513 * c35 * c45 * c77 * c80 +
       3 * C3513 * c49 * c58 * c77 * c80 + C0511 * c10 * c215 * c93 +
       2 * C0512 * c10 * c207 * c75 * c93 + 3 * C0513 * c10 * c77 * c80 * c93 +
       C0521 * c14 * c215 * c97 + 2 * C0522 * c14 * c207 * c75 * c97) /
      Power(c77, 4);

  return out;
}

std::pair<Mat6x6, Vec6> FittedMaterial::psi_drv(const Vec6 &ek) {
  // define output
  Mat6x6 hess(0);
  Vec6 grad(0);
  auto out1 = [&](int i) -> Real & { return grad[i]; };
  auto out2 = [&](int i, int j) -> Real & { return hess(i, j); };

  Real c9 = ek(0);
  Real c10 = -1 + c9;
  Real c1 = ekscale(0);
  Real c18 = Power(c1, 3);
  Real c21 = ek(1);
  Real c16 = Power(c1, 2);
  Real c23 = ekscale(1);
  Real c26 = Power(c21, 2);
  Real c27 = Power(c23, -2);
  Real c14 = Power(c10, 2);
  Real c30 = 1 / c23;
  Real c34 = ek(2);
  Real c35 = -1 + c34;
  Real c37 = ekscale(2);
  Real c40 = Power(c35, 2);
  Real c42 = Power(c37, -2);
  Real c45 = 1 / c37;
  Real c49 = ek(3);
  Real c51 = ekscale(3);
  Real c54 = Power(c49, 2);
  Real c55 = Power(c51, -2);
  Real c58 = 1 / c51;
  Real c62 = ek(4);
  Real c64 = ekscale(4);
  Real c67 = Power(c62, 2);
  Real c68 = Power(c64, -2);
  Real c71 = 1 / c64;
  Real c75 = ek(5);
  Real c77 = ekscale(5);
  Real c80 = Power(c75, 2);
  Real c81 = Power(c77, -2);
  Real c84 = 1 / c77;
  Real c22 = Power(c21, 3);
  Real c95 = Power(c23, 2);
  Real c93 = 1 / c1;
  Real c11 = Power(c10, 3);
  Real c100 = Power(c23, 3);
  Real c97 = Power(c1, -2);
  Real c36 = Power(c35, 3);
  Real c112 = Power(c37, 2);
  Real c102 = Power(c1, -3);
  Real c116 = Power(c37, 3);
  Real c50 = Power(c49, 3);
  Real c52 = Power(c51, -3);
  Real c63 = Power(c62, 3);
  Real c65 = Power(c64, -3);
  Real c76 = Power(c75, 3);
  Real c78 = Power(c77, -3);
  Real c146 = Power(c51, 2);
  Real c152 = Power(c51, 3);
  Real c38 = Power(c37, -3);
  Real c180 = Power(c64, 2);
  Real c188 = Power(c64, 3);
  Real c207 = Power(c77, 2);
  Real c215 = Power(c77, 3);
  Real c2 = Power(c1, -4);
  Real c24 = Power(c23, -3);
  Real c248 = 3 * C0113 * c16 * c26;
  Real c249 = 4 * C0122 * c1 * c10 * c21;
  Real c250 = 2 * C0112 * c16 * c21;
  Real c251 = 3 * C0131 * c14;
  Real c252 = 2 * C0121 * c10;
  Real c253 = C0111 * c1;
  Real c254 = c252 + c253;
  Real c255 = c1 * c254;
  Real c256 = c251 + c255;
  Real c257 = c23 * c256;
  Real c258 = c249 + c250 + c257;
  Real c259 = c23 * c258;
  Real c260 = c248 + c259;
  Real c261 = c102 * c24 * c260;
  Real c90 = Power(c23, -4);
  Real c262 = 3 * C0213 * c16 * c40;
  Real c263 = 4 * C0222 * c1 * c10 * c35;
  Real c264 = 2 * C0212 * c16 * c35;
  Real c265 = 3 * C0231 * c14;
  Real c266 = 2 * C0221 * c10;
  Real c267 = C0211 * c1;
  Real c268 = c266 + c267;
  Real c269 = c1 * c268;
  Real c270 = c265 + c269;
  Real c271 = c270 * c37;
  Real c272 = c263 + c264 + c271;
  Real c273 = c272 * c37;
  Real c274 = c262 + c273;
  Real c275 = c102 * c274 * c38;
  Real c108 = Power(c37, -4);
  Real c276 = 3 * C0313 * c16 * c54;
  Real c277 = 4 * C0322 * c1 * c10 * c49;
  Real c278 = 2 * C0312 * c16 * c49;
  Real c279 = 3 * C0331 * c14;
  Real c280 = 2 * C0321 * c10;
  Real c281 = C0311 * c1;
  Real c282 = c280 + c281;
  Real c283 = c1 * c282;
  Real c284 = c279 + c283;
  Real c285 = c284 * c51;
  Real c286 = c277 + c278 + c285;
  Real c287 = c286 * c51;
  Real c288 = c276 + c287;
  Real c289 = c102 * c288 * c52;
  Real c349 = 3 * C2313 * c112 * c54;
  Real c350 = 4 * C2322 * c35 * c37 * c49;
  Real c351 = 2 * C2312 * c112 * c49;
  Real c352 = 3 * C2331 * c40;
  Real c353 = 2 * C2321 * c35;
  Real c354 = C2311 * c37;
  Real c355 = c353 + c354;
  Real c356 = c355 * c37;
  Real c357 = c352 + c356;
  Real c358 = c357 * c51;
  Real c359 = c350 + c351 + c358;
  Real c360 = c359 * c51;
  Real c361 = c349 + c360;
  Real c362 = c361 * c38 * c52;
  Real c141 = Power(c51, -4);
  Real c290 = 3 * C0413 * c16 * c67;
  Real c291 = 4 * C0422 * c1 * c10 * c62;
  Real c292 = 2 * C0412 * c16 * c62;
  Real c293 = 3 * C0431 * c14;
  Real c294 = 2 * C0421 * c10;
  Real c295 = C0411 * c1;
  Real c296 = c294 + c295;
  Real c297 = c1 * c296;
  Real c298 = c293 + c297;
  Real c299 = c298 * c64;
  Real c300 = c291 + c292 + c299;
  Real c301 = c300 * c64;
  Real c302 = c290 + c301;
  Real c303 = c102 * c302 * c65;
  Real c363 = 3 * C2413 * c112 * c67;
  Real c364 = 4 * C2422 * c35 * c37 * c62;
  Real c365 = 2 * C2412 * c112 * c62;
  Real c366 = 3 * C2431 * c40;
  Real c367 = 2 * C2421 * c35;
  Real c368 = C2411 * c37;
  Real c369 = c367 + c368;
  Real c370 = c369 * c37;
  Real c371 = c366 + c370;
  Real c372 = c371 * c64;
  Real c373 = c364 + c365 + c372;
  Real c374 = c373 * c64;
  Real c375 = c363 + c374;
  Real c376 = c375 * c38 * c65;
  Real c408 = 3 * C3413 * c146 * c67;
  Real c409 = 4 * C3422 * c49 * c51 * c62;
  Real c410 = 2 * C3412 * c146 * c62;
  Real c411 = 3 * C3431 * c54;
  Real c412 = 2 * C3421 * c49 * c51;
  Real c413 = C3411 * c146;
  Real c414 = c411 + c412 + c413;
  Real c415 = c414 * c64;
  Real c416 = c409 + c410 + c415;
  Real c417 = c416 * c64;
  Real c418 = c408 + c417;
  Real c419 = c418 * c52 * c65;
  Real c174 = Power(c64, -4);
  Real c304 = 3 * C0513 * c16 * c80;
  Real c305 = 4 * C0522 * c1 * c10 * c75;
  Real c306 = 2 * C0512 * c16 * c75;
  Real c307 = 3 * C0531 * c14;
  Real c308 = 2 * C0521 * c10;
  Real c309 = C0511 * c1;
  Real c310 = c308 + c309;
  Real c311 = c1 * c310;
  Real c312 = c307 + c311;
  Real c313 = c312 * c77;
  Real c314 = c305 + c306 + c313;
  Real c315 = c314 * c77;
  Real c316 = c304 + c315;
  Real c317 = c102 * c316 * c78;
  Real c377 = 3 * C2513 * c112 * c80;
  Real c378 = 4 * C2522 * c35 * c37 * c75;
  Real c379 = 2 * C2512 * c112 * c75;
  Real c380 = 3 * C2531 * c40;
  Real c381 = 2 * C2521 * c35;
  Real c382 = C2511 * c37;
  Real c383 = c381 + c382;
  Real c384 = c37 * c383;
  Real c385 = c380 + c384;
  Real c386 = c385 * c77;
  Real c387 = c378 + c379 + c386;
  Real c388 = c387 * c77;
  Real c389 = c377 + c388;
  Real c390 = c38 * c389 * c78;
  Real c420 = 3 * C3513 * c146 * c80;
  Real c421 = 4 * C3522 * c49 * c51 * c75;
  Real c422 = 2 * C3512 * c146 * c75;
  Real c423 = 3 * C3531 * c54;
  Real c424 = 2 * C3521 * c49 * c51;
  Real c425 = C3511 * c146;
  Real c426 = c423 + c424 + c425;
  Real c427 = c426 * c77;
  Real c428 = c421 + c422 + c427;
  Real c429 = c428 * c77;
  Real c430 = c420 + c429;
  Real c431 = c430 * c52 * c78;
  Real c201 = Power(c77, -4);
  out1(0) = c2 * (4 * C04 * c11 + 3 * C03 * c1 * c14 + 2 * C02 * c10 * c16 +
                  C01 * c18 + C0113 * c18 * c22 * c24 +
                  2 * C0122 * c10 * c16 * c26 * c27 + C0112 * c18 * c26 * c27 +
                  3 * C0131 * c1 * c14 * c21 * c30 +
                  2 * C0121 * c10 * c16 * c21 * c30 + C0111 * c18 * c21 * c30 +
                  C0213 * c18 * c36 * c38 + 2 * C0222 * c10 * c16 * c40 * c42 +
                  C0212 * c18 * c40 * c42 + 3 * C0231 * c1 * c14 * c35 * c45 +
                  2 * C0221 * c10 * c16 * c35 * c45 + C0211 * c18 * c35 * c45 +
                  C0313 * c18 * c50 * c52 + 2 * C0322 * c10 * c16 * c54 * c55 +
                  C0312 * c18 * c54 * c55 + 3 * C0331 * c1 * c14 * c49 * c58 +
                  2 * C0321 * c10 * c16 * c49 * c58 + C0311 * c18 * c49 * c58 +
                  C0413 * c18 * c63 * c65 + 2 * C0422 * c10 * c16 * c67 * c68 +
                  C0412 * c18 * c67 * c68 + 3 * C0431 * c1 * c14 * c62 * c71 +
                  2 * C0421 * c10 * c16 * c62 * c71 + C0411 * c18 * c62 * c71 +
                  C0513 * c18 * c76 * c78 + 2 * C0522 * c10 * c16 * c80 * c81 +
                  C0512 * c18 * c80 * c81 + 3 * C0531 * c1 * c14 * c75 * c84 +
                  2 * C0521 * c10 * c16 * c75 * c84 + C0511 * c18 * c75 * c84);
  out1(1) =
      c90 * (C11 * c100 + C0131 * c100 * c102 * c11 + 4 * C14 * c22 +
             3 * C13 * c23 * c26 + C0111 * c10 * c100 * c93 +
             3 * C0113 * c10 * c23 * c26 * c93 + 2 * C12 * c21 * c95 +
             2 * C0112 * c10 * c21 * c93 * c95 + C0121 * c100 * c14 * c97 +
             2 * C0122 * c14 * c21 * c95 * c97);
  out1(2) =
      c108 *
      (C21 * c116 + C0231 * c102 * c11 * c116 + 2 * C22 * c112 * c35 +
       4 * C24 * c36 + 3 * C23 * c37 * c40 + C2313 * c116 * c50 * c52 +
       C2312 * c116 * c54 * c55 + 2 * C2322 * c112 * c35 * c54 * c55 +
       C2311 * c116 * c49 * c58 + 2 * C2321 * c112 * c35 * c49 * c58 +
       3 * C2331 * c37 * c40 * c49 * c58 + C2413 * c116 * c63 * c65 +
       C2412 * c116 * c67 * c68 + 2 * C2422 * c112 * c35 * c67 * c68 +
       C2411 * c116 * c62 * c71 + 2 * C2421 * c112 * c35 * c62 * c71 +
       3 * C2431 * c37 * c40 * c62 * c71 + C2513 * c116 * c76 * c78 +
       C2512 * c116 * c80 * c81 + 2 * C2522 * c112 * c35 * c80 * c81 +
       C2511 * c116 * c75 * c84 + 2 * C2521 * c112 * c35 * c75 * c84 +
       3 * C2531 * c37 * c40 * c75 * c84 + C0211 * c10 * c116 * c93 +
       2 * C0212 * c10 * c112 * c35 * c93 + 3 * C0213 * c10 * c37 * c40 * c93 +
       C0221 * c116 * c14 * c97 + 2 * C0222 * c112 * c14 * c35 * c97);
  out1(3) =
      c141 *
      (C31 * c152 + C0331 * c102 * c11 * c152 + C2331 * c152 * c36 * c38 +
       C2321 * c152 * c40 * c42 + C2311 * c152 * c35 * c45 +
       2 * C32 * c146 * c49 + 2 * C2322 * c146 * c40 * c42 * c49 +
       2 * C2312 * c146 * c35 * c45 * c49 + 4 * C34 * c50 +
       3 * C33 * c51 * c54 + 3 * C2313 * c35 * c45 * c51 * c54 +
       C3413 * c152 * c63 * c65 + C3412 * c152 * c67 * c68 +
       2 * C3422 * c146 * c49 * c67 * c68 + C3411 * c152 * c62 * c71 +
       2 * C3421 * c146 * c49 * c62 * c71 + 3 * C3431 * c51 * c54 * c62 * c71 +
       C3513 * c152 * c76 * c78 + C3512 * c152 * c80 * c81 +
       2 * C3522 * c146 * c49 * c80 * c81 + C3511 * c152 * c75 * c84 +
       2 * C3521 * c146 * c49 * c75 * c84 + 3 * C3531 * c51 * c54 * c75 * c84 +
       C0311 * c10 * c152 * c93 + 2 * C0312 * c10 * c146 * c49 * c93 +
       3 * C0313 * c10 * c51 * c54 * c93 + C0321 * c14 * c152 * c97 +
       2 * C0322 * c14 * c146 * c49 * c97);
  out1(4) =
      c174 *
      (C41 * c188 + C0431 * c102 * c11 * c188 + C2431 * c188 * c36 * c38 +
       C2421 * c188 * c40 * c42 + C2411 * c188 * c35 * c45 +
       C3431 * c188 * c50 * c52 + C3421 * c188 * c54 * c55 +
       C3411 * c188 * c49 * c58 + 2 * C42 * c180 * c62 +
       2 * C2422 * c180 * c40 * c42 * c62 + 2 * C2412 * c180 * c35 * c45 * c62 +
       2 * C3422 * c180 * c54 * c55 * c62 + 2 * C3412 * c180 * c49 * c58 * c62 +
       4 * C44 * c63 + 3 * C43 * c64 * c67 + 3 * C2413 * c35 * c45 * c64 * c67 +
       3 * C3413 * c49 * c58 * c64 * c67 + C0411 * c10 * c188 * c93 +
       2 * C0412 * c10 * c180 * c62 * c93 + 3 * C0413 * c10 * c64 * c67 * c93 +
       C0421 * c14 * c188 * c97 + 2 * C0422 * c14 * c180 * c62 * c97);
  out1(5) =
      c201 *
      (C51 * c215 + C0531 * c102 * c11 * c215 + C2531 * c215 * c36 * c38 +
       C2521 * c215 * c40 * c42 + C2511 * c215 * c35 * c45 +
       C3531 * c215 * c50 * c52 + C3521 * c215 * c54 * c55 +
       C3511 * c215 * c49 * c58 + 2 * C52 * c207 * c75 +
       2 * C2522 * c207 * c40 * c42 * c75 + 2 * C2512 * c207 * c35 * c45 * c75 +
       2 * C3522 * c207 * c54 * c55 * c75 + 2 * C3512 * c207 * c49 * c58 * c75 +
       4 * C54 * c76 + 3 * C53 * c77 * c80 + 3 * C2513 * c35 * c45 * c77 * c80 +
       3 * C3513 * c49 * c58 * c77 * c80 + C0511 * c10 * c215 * c93 +
       2 * C0512 * c10 * c207 * c75 * c93 + 3 * C0513 * c10 * c77 * c80 * c93 +
       C0521 * c14 * c215 * c97 + 2 * C0522 * c14 * c207 * c75 * c97);
  out2(0, 0) = 2 * c2 *
               (3 * C03 * c1 * c10 + 6 * C04 * c14 + C02 * c16 +
                C0122 * c16 * c26 * c27 + 3 * C0131 * c1 * c10 * c21 * c30 +
                C0121 * c16 * c21 * c30 + C0222 * c16 * c40 * c42 +
                3 * C0231 * c1 * c10 * c35 * c45 + C0221 * c16 * c35 * c45 +
                C0322 * c16 * c54 * c55 + 3 * C0331 * c1 * c10 * c49 * c58 +
                C0321 * c16 * c49 * c58 + C0422 * c16 * c67 * c68 +
                3 * C0431 * c1 * c10 * c62 * c71 + C0421 * c16 * c62 * c71 +
                C0522 * c16 * c80 * c81 + 3 * C0531 * c1 * c10 * c75 * c84 +
                C0521 * c16 * c75 * c84);
  out2(0, 1) = c261;
  out2(0, 2) = c275;
  out2(0, 3) = c289;
  out2(0, 4) = c303;
  out2(0, 5) = c317;
  out2(1, 0) = c261;
  out2(1, 1) = 2 * c90 *
               (6 * C14 * c26 +
                c23 *
                    (3 * C0113 * c1 * c10 * c21 + 3 * C13 * c16 * c21 +
                     (c1 * (C12 * c1 + C0112 * c10) + C0122 * c14) * c23) *
                    c97);
  out2(1, 2) = 0;
  out2(1, 3) = 0;
  out2(1, 4) = 0;
  out2(1, 5) = 0;
  out2(2, 0) = c275;
  out2(2, 1) = 0;
  out2(2, 2) = 2 * c108 *
               (C22 * c112 + 3 * C23 * c35 * c37 + 6 * C24 * c40 +
                C2322 * c112 * c54 * c55 + C2321 * c112 * c49 * c58 +
                3 * C2331 * c35 * c37 * c49 * c58 + C2422 * c112 * c67 * c68 +
                C2421 * c112 * c62 * c71 + 3 * C2431 * c35 * c37 * c62 * c71 +
                C2522 * c112 * c80 * c81 + C2521 * c112 * c75 * c84 +
                3 * C2531 * c35 * c37 * c75 * c84 + C0212 * c10 * c112 * c93 +
                3 * C0213 * c10 * c35 * c37 * c93 + C0222 * c112 * c14 * c97);
  out2(2, 3) = c362;
  out2(2, 4) = c376;
  out2(2, 5) = c390;
  out2(3, 0) = c289;
  out2(3, 1) = 0;
  out2(3, 2) = c362;
  out2(3, 3) =
      2 * c141 *
      (C32 * c146 + C2322 * c146 * c40 * c42 + C2312 * c146 * c35 * c45 +
       3 * C33 * c49 * c51 + 3 * C2313 * c35 * c45 * c49 * c51 + 6 * C34 * c54 +
       C3422 * c146 * c67 * c68 + C3421 * c146 * c62 * c71 +
       3 * C3431 * c49 * c51 * c62 * c71 + C3522 * c146 * c80 * c81 +
       C3521 * c146 * c75 * c84 + 3 * C3531 * c49 * c51 * c75 * c84 +
       C0312 * c10 * c146 * c93 + 3 * C0313 * c10 * c49 * c51 * c93 +
       C0322 * c14 * c146 * c97);
  out2(3, 4) = c419;
  out2(3, 5) = c431;
  out2(4, 0) = c303;
  out2(4, 1) = 0;
  out2(4, 2) = c376;
  out2(4, 3) = c419;
  out2(4, 4) =
      2 * c174 *
      (C42 * c180 + C2422 * c180 * c40 * c42 + C2412 * c180 * c35 * c45 +
       C3422 * c180 * c54 * c55 + C3412 * c180 * c49 * c58 +
       3 * C43 * c62 * c64 + 3 * C2413 * c35 * c45 * c62 * c64 +
       3 * C3413 * c49 * c58 * c62 * c64 + 6 * C44 * c67 +
       C0412 * c10 * c180 * c93 + 3 * C0413 * c10 * c62 * c64 * c93 +
       C0422 * c14 * c180 * c97);
  out2(4, 5) = 0;
  out2(5, 0) = c317;
  out2(5, 1) = 0;
  out2(5, 2) = c390;
  out2(5, 3) = c431;
  out2(5, 4) = 0;
  out2(5, 5) =
      2 * c201 *
      (C52 * c207 + C2522 * c207 * c40 * c42 + C2512 * c207 * c35 * c45 +
       C3522 * c207 * c54 * c55 + C3512 * c207 * c49 * c58 +
       3 * C53 * c75 * c77 + 3 * C2513 * c35 * c45 * c75 * c77 +
       3 * C3513 * c49 * c58 * c75 * c77 + 6 * C54 * c80 +
       C0512 * c10 * c207 * c93 + 3 * C0513 * c10 * c75 * c77 * c93 +
       C0522 * c14 * c207 * c97);

  return std::make_pair(hess, grad);
}
